Front End:

>> User Interface(UI) where the users can see and interact with the application
>>client side
>>Creating websites,designs and structures

1.Javascript:

>static and dynamic Websites:

i.static websites remains same to everyone. ex:Fb login page

ii.Dynamic: changes to everyone(data)

ex: facebook,

>>javascript is a scripting language
>>it is used for form validations
>> it is used to develop dynamic web pages
>>released by "Netscape"
>>current version-"ES13"
>js runs the code line by line is called "synchronous" execution
>> java script is written inside ,<script></script> tags in web pages
>it is a object based and object oriented programming language used to cobert to static page to dynamic page

Data Types:
It is a value used in  programming language two types:
1.Primitive      2.Non Primitive
  string            class
  Boolean           object
  number            array
  undefined         functions
  null              map
  big-Int           set
  backtick

-----------------------------------------
Variables:
--used to store the data
--any kind of data 
--same variable name can update the latest value
--case sensitive
> it is a dynamic nature
Ex: var a=10
 Scopes:
-global --> 
-local-scope/script-scope -->declare the variable inside the method
-block-scope -->

variables are divided into three types:
var - redeclaration and reinitialization is possible
let - reinitialization is possible
const - redeclaration and reinitialization are not possible

JavaScript is a client side programming language as well as server side.
any program which runs on the browser it is a client side
browser as a debugger, search engine, 
js is a platform independent
JS is a synchronous(single threading)

-----------------------------------------------------------------------
FSD using CSS there are three main parts:
1.flex -moving html code with respect to x-axis
2.grid -  html code with-main axis and y-axis
3.mediaquery-execute web pages into multiple devices


-->java there are three types
1.j to SE
2.j to EE
3.j to ME







FULL STACK APPLICATION:

ReactJS                    Spring Boot            MySQL                       AWS
    |                            |                 |                           |
connected to spring boot
read from spring boot      connected to mysql   stores the image path      S3 bucket
                           read the data from mysql                                   
                                                                           laptop.jpeg
                                                                          watch.jpeg

                                                
-->we will provide public access to multimedia files with the help of amazon s3 bucket
-->s3 bucket behaves like storage device for multimedia files
-->we will store multimedia files path in database(MySQL, mongo dB, Cassandra dB)
-->spring boot framework behaves like backend
-->backend application(spring boot) connect and reads data from database
-->frontend application(reactjs) will connect to backend and reads data from backend application
-->in full stack application reactjs behaves like frontend, springboot behaves like backend and mysql or mongodb behaves like database 


MySQL commands:
-->mysql -u root -p
-->create database ecommbat;
-->use ecommbat;
-->create table mobiles(id int primary key, pname varchar(20), pcost double, pimage varchar(200), pqty int);

--> insert into mobiles(1, 'Mobile1',10,'image path', 10)
-->select * from mobiles



Spring Boot:

-->spring boot is the backend java framework
-->spring boot built on top of spring framework
-->spring boot used to develop production ready applications with minimum configurations
-->spring boot follows mvc(model view controller) design pattern 


-->variables are behave like model in mvc
-->controller are used to receive requests
-->simple core java class behaves like controller
-->service used to write business logic
-->service layer will connect and receives data from databases


MVC flow:

-->view will send request to controller
-->controller will bypass same request to service
-->service will connect to MySQL database with the help of JPA repo

-->JPA stands java persistence api
-->JPA repository contains ready-made methods



Annotations:

-->annotations enhancing functionality
-->annotations also changes the behaviour of the class

1. @RestController  --> used to create controller in mvc application
2. @Service  --> used to create service layer in mvc application
3. @Entity  --> used to create replica of the table
4. @id  --> used to represent primary key column
5. @Column  -->used to represent table column
6. @Repository -->

Setter & Getters --> used to modify or read the table data
toString() -->used to read table data in string format
constructors --> used to initialize the table data



Ex:

@Entity
public class Mobiles{
  @id
  @Column
  private int id

  @Column
  private String pname
  
  @Column
  private double pcost
 
  @Column 
  private String pimage
  
  @Column
  private int pqty

  Setters & Getters

  toString()

  Constructors

}



-->IDE stands for Integrated Development Environment
-->STS stands for spring tool Suit